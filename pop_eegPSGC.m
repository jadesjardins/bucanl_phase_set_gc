% pop_eegPSGC() - collects inputs for eegPSGC which the phase shift Granger causality on
%                pruned continuous EEG data.
%
% Usage:
%   >>  com= pop_eegPSGC(EEG, dattype, datind, varargin);
%
% Inputs:
%   EEG         - input EEG structure
%   dattype     - data type, 1= scalp signal, 2 = IC signal
%   datind      - index of signals to use [ind1,ind2]
%   evttype     - label of event type to use as boundary marker. If this
%               input is a cell array 
%   optstr      - string containing pop_eegpr key/val pairs for
%               varargin. See Options.with a length of 1 the specified even
%               is interpreted a marker of a cut in the data. If the length
%               of the cell array is 2 the phase reset calculations are
%               performed on the periods in the data that begin at
%               evttype{1} and end at evttype{2}.
%
% Options:

% Outputs:
%   com         - pop_eegpr command string
%
% See also:
%   eegpr

% Copyright (C) <2010>  <James Desjardins>
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function [EEG com] = pop_eegPSGC(EEG, dattype, datind, evttype)

%g = struct(varargin{:});

%if ~isempty(g)
%    optstr='';
%    try g.nfids;        catch, g.nfids      = 3;       end;
%    optstr=['''nfids'', ', num2str(g.nfids)];
%end

% the command output is a hidden output that does not have to
% be described in the header
com = ''; % this initialization ensure that the function will return something
          % if the user press the cancel button            
          % display help if not enough arguments
% ------------------------------------

if nargin < 1
	help pop_eegpr;
	return;
end;	

DataTypeCell={'EEG'};
if ~isempty(EEG.icaweights);
    DataTypeCell={'EEG','ICA'};
    for i=1:length(EEG.icaweights(:,1));EEG.ic(i).labels=sprintf('%s%s','comp',num2str(i));end
end

if isempty(EEG.chanlocs);
    disp('Labelling channels by number.');
    for i=1:EEG.nbchan;
        EEG.chanlocs(i).labels=num2str(i);
    end
end

%if some event types are stored numerically convert them to strings...
Num2StrEvCount=0;
for i=1:length(EEG.event);
    if isnumeric(EEG.event(i).type);
        Num2StrEvCount=Num2StrEvCount+1;
        EEG.event(i).type=num2str(EEG.event(i).type);
    end
end
if Num2StrEvCount>0;
    disp(sprintf('%s%s', num2str(Num2StrEvCount), 'numeric event types converted to string'));
end
    

% pop up window
% -------------
if nargin < 11

    if ~isempty(strmatch('boundary',{EEG.event.type},'exact'));
        eventlist=vararg2str('boundary');
    else
        eventlist = '';
    end
    results=inputgui( ...
    {[1] [1] [4 4 1] [4 4 1] [4 4 1] [1] [4 4 1] [4 4 1] [4 4 1] [4 4 1] [4 4 1] [4 4 1] [4 4 1] [4 4 1]}, ...
    {...
        ... %1
        {'Style', 'text', 'string', 'Enter phase shift Granger causality parameters.', 'FontWeight', 'bold'}, ...
        ... %2
        {}, ...
        ... %3
        {'Style', 'text', 'string', 'Data type to use:'}, ...
        {'Style', 'popup', 'string', DataTypeCell, 'tag', 'DataTypePop'... 
                  'callback', ['switch get(findobj(gcbf, ''tag'', ''DataTypePop''), ''value'');' ...
                               '    case 1;' ...
                               '        set(findobj(gcbf, ''tag'', ''ChanLabelButton''), ''callback'',' ...
                               '            [''[ChanLabelIndex,ChanLabelStr,ChanLabelCell]=pop_chansel({EEG.chanlocs.labels});' ...
                               '             set(findobj(gcbf, ''''tag'''', ''''ChanIndexEdit''''), ''''string'''', vararg2str(ChanLabelIndex))'']);' ...
                               '        set(findobj(gcbf, ''tag'', ''ChanIndexEdit''), ''string'', vararg2str(1:EEG.nbchan));' ...
                               '    case 2;' ...
                               '        set(findobj(gcbf, ''tag'', ''ChanLabelButton''), ''callback'',' ...
                               '            [''for i=1:length(EEG.icaweights(:,1));IC(i).labels=sprintf(''''%s%s'''',''''comp'''',num2str(i));end;' ...
                               '            [ChanLabelIndex,ChanLabelStr,ChanLabelCell]=pop_chansel({IC.labels});' ...
                               '             set(findobj(gcbf, ''''tag'''', ''''ChanIndexEdit''''), ''''string'''', vararg2str(ChanLabelIndex))'']);' ...
                               '        set(findobj(gcbf, ''tag'', ''ChanIndexEdit''), ''string'', vararg2str(1:length(EEG.icaweights(:,1))));' ...
                               'end']}, ...
        {}, ...
        ... %4
        {'Style', 'text', 'string', 'Signals to use:'}, ...
        {'Style', 'edit', 'string', vararg2str(1:EEG.nbchan),'tag', 'ChanIndexEdit'}, ...
        {'Style', 'pushbutton', 'string', '...', 'tag', 'ChanLabelButton',... 
                  'callback', ['[ChanLabelIndex,ChanLabelStr,ChanLabelCell]=pop_chansel({EEG.chanlocs.labels});' ...
                  'set(findobj(gcbf, ''tag'', ''ChanIndexEdit''), ''string'', vararg2str(ChanLabelIndex))']}, ...
        ... %5
        {'Style', 'text', 'string', 'Event types identifying analysis borders:'}, ...
        {'Style', 'edit', 'string', eventlist, 'tag', 'EventTypeEdit'}, ...
        {'Style', 'pushbutton', 'string', '...', ... 
                  'callback', ['[EventTypeIndex,EventTypeStr,EventTypeCell]=pop_chansel(unique({EEG.event.type}));' ...
                  'set(findobj(gcbf, ''tag'', ''EventTypeEdit''), ''string'', vararg2str(EventTypeCell))']}, ...
        ... %6
        {}, ...
        ... %7
        {'Style', 'text', 'string', 'Window size:'}, ...
        {'Style', 'edit', 'string', '50', 'tag', 'WinSizeEdit'}, ...
        {}, ...
        ... %8
        {'Style', 'text', 'string', 'Refractory period:'}, ...
        {'Style', 'edit', 'string', '5', 'tag', 'RefractPEdit'}, ...
        {}, ...
        ... %9
        {'Style', 'text', 'string', 'Phase shift theshold:'}, ...
        {'Style', 'edit', 'string', '0.02', 'tag', 'PSThreshEdit'}, ...
        {}, ...
        ... %10
        {'Style', 'text', 'string', 'Frequency center:'}, ...
        {'Style', 'edit', 'string', '9', 'tag', 'FreqCEdit'}, ...
        {}, ...
        ... %11
        {'Style', 'text', 'string', 'Frequency width:'}, ...
        {'Style', 'edit', 'string', '1', 'tag', 'FreqWEdit'}, ...
        {}, ...
        ... %12
        {'Style', 'text', 'string', 'Number of points in likelihood approximation:'}, ...
        {'Style', 'edit', 'string', '2', 'tag', 'PntLApproxEdit'}, ...
        {}, ...
        ... %13
        {'Style', 'text', 'string', 'values of M that are considered:'}, ...
        {'Style', 'edit', 'string', vararg2str(3:6), 'tag', 'valMConsiderEdit'}, ...
        {}, ...
        ... %14
        {'Style', 'text', 'string', 'Output file name:'}, ...
        {'Style', 'edit', 'string', 'out.mat', 'tag', 'valMConsiderEdit'}, ...
        {} ...

     }, ...
     'pophelp(''pop_eegpr'');', 'Select phase reset parameters -- pop_eegpr()' ...
     );
 
     if isempty(results);return;end
     
     dattype  = results{1};
     datind   = results{2};
     evttype  = results{3};
     W        = results{4};
     RW       = results{5};
     c        = results{6};
     w        = results{7};
     width    = results{8};
     deltaP   = results{9};
     Mvec     = results{10};
     fNameOut = results{11};
     
end


% return command
% -------------------------
com=sprintf('EEG = pop_eegPSGC( %s, %d, %s, {%s}, %s, %s, %s, %s, %s, %s, %s, %s);', ...
                            inputname(1), ...
                            dattype, ...
                            vararg2str(datind), ...
                            evttype, ...
                            W, ...
                            RW, ...
                            c, ...
                            w, ...
                            width, ...
                            deltaP, ...
                            Mvec, ...
                            fNameOut)

% call command
% ------------
exec=sprintf('EEG = eegPSGC( %s, %d, %s, {%s}, %s, %s, %s, %s, %s, %s, %s, ''%s'');', ...
                            inputname(1), ...
                            dattype, ...
                            vararg2str(datind), ...
                            evttype, ...
                            W, ...
                            RW, ...
                            c, ...
                            w, ...
                            width, ...
                            deltaP, ...
                            Mvec, ...
                            fNameOut);
eval(exec);
